{
  "name": "cfml-auto-formatter",
  "displayName": "CFML Auto Formatter",
  "publisher": "hri",
  "description": "CFML Indent Formatter / CFML インデント整形",
  "icon": "images/icon.png",
  "version": "1.0.20",
  "author": "SATT李",
  "license": "MIT",
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Formatters"
  ],
  "tags": [
    "CFML",
    "CFScript",
    "ColdFusion",
    "Lucee",
    "Formatter"
  ],
  "activationEvents": [
    "onLanguage:cfml",
    "onLanguage:html",
    "onLanguage:css",
    "onLanguage:javascript"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/satt-hri/vscode-plugin-cf-formatter.git"
  },
  "scripts": {
    "build": "webpack --mode production",
    "watch": "webpack --mode development --watch",
    "prepackage": "npm run build",
    "package": "vsce package",
    "debug": "node --inspect src/test/sql_format/format.js"
  },
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "hri.cfml.formatTagSyntax",
        "title": "CFTag Syntax",
        "category": "CFML"
      },
      {
        "command": "hri.cfml.formatScriptSyntax",
        "title": "Script Syntax",
        "category": "CFML"
      },
      {
        "command": "hri.cfml.formatHtmlSyntax",
        "title": "HTML Syntax",
        "category": "CFML"
      },
      {
        "command": "hri.cfml.formatCssSyntax",
        "title": "CSS Syntax",
        "category": "CFML"
      }
    ],
    "submenus": [
      {
        "label": "Format Code (satt)",
        "id": "hri.cfml.formatMenu"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "submenu": "hri.cfml.formatMenu",
          "when": "editorLangId == cfml || editorLangId == html || editorLangId == css || editorLangId == javascript",
          "group": "1_modification"
        }
      ],
      "hri.cfml.formatMenu": [
        {
          "command": "hri.cfml.formatTagSyntax",
          "group": "format@1",
          "when": "editorLangId == cfml"
        },
        {
          "command": "hri.cfml.formatScriptSyntax",
          "group": "format@2",
          "when": "editorLangId == cfml || editorLangId == javascript || editorLangId == html"
        },
        {
          "command": "hri.cfml.formatHtmlSyntax",
          "group": "format@3",
          "when": "editorLangId == cfml || editorLangId == html"
        },
        {
          "command": "hri.cfml.formatCssSyntax",
          "group": "format@4",
          "when": "editorLangId == cfml || editorLangId == css|| editorLangId == html"
        }
      ],
      "commandPalette": [
        {
          "command": "hri.cfml.formatTagSyntax",
          "when": "editorLangId == cfml"
        },
        {
          "command": "hri.cfml.formatScriptSyntax",
          "when": "editorLangId == cfml || editorLangId == javascript"
        },
        {
          "command": "hri.cfml.formatHtmlSyntax",
          "when": "editorLangId == cfml || editorLangId == html"
        },
        {
          "command": "hri.cfml.formatCssSyntax",
          "when": "editorLangId == cfml || editorLangId == css"
        }
      ]
    },
    "keybindings": [
      {
        "command": "hri.cfml.formatTagSyntax",
        "key": "shift+alt+m",
        "when": "editorLangId == cfml && editorTextFocus"
      },
      {
        "command": "hri.cfml.formatScriptSyntax",
        "key": "shift+alt+n",
        "when": "(editorLangId == cfml || editorLangId == javascript ) && editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Format CFML (satt)",
      "properties": {
        "hri.cfml.formatter.indentWithTabs": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Use tabs for indentation instead of spaces (js-beautify)."
        },
        "hri.cfml.formatter.indentSize": {
          "type": "number",
          "default": 4,
          "minimum": 1,
          "maximum": 10,
          "markdownDescription": "Number of spaces to use for indentation when using spaces (js-beautify)."
        },
        "hri.cfml.formatter.indentChar": {
          "type": "string",
          "default": " ",
          "enum": [
            " ",
            "\t"
          ],
          "markdownDescription": "Character to use for indentation: `' '` (space) or `'\\t'` (tab).\n\n**Note:** This setting is overridden by `indentWithTabs` (js-beautify)."
        },
        "hri.cfml.formatter.wrapLineLength": {
          "type": "number",
          "default": 0,
          "minimum": 0,
          "markdownDescription": "Maximum line length before wrapping. Set to `0` for no limit (js-beautify)."
        },
        "hri.cfml.formatter.maxPreserveNewlines": {
          "type": "number",
          "default": 1,
          "enum": [
            -1,
            0,
            1,
            2,
            5,
            10
          ],
          "markdownDescription": "Maximum number of consecutive newlines to preserve in the output (js-beautify):\n\n- `-1`: Remove all extra newlines\n- `1`: Allow 1 newline between tokens\n- `0`: Unlimited newlines between tokens"
        },
        "hri.cfml.formatter.preserveNewlines": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Preserve existing line breaks in the output (js-beautify)."
        },
        "hri.cfml.formatter.keepArrayIndentation": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Preserve the original indentation of arrays instead of re-indenting them (js-beautify)."
        },
        "hri.cfml.formatter.braceStyle": {
          "type": "string",
          "default": "collapse",
          "enum": [
            "collapse",
            "expand",
            "end-expand",
            "none"
          ],
          "enumDescriptions": [
            "Opening brace on same line",
            "Opening brace on new line",
            "New line for functions/blocks only",
            "Keep original position"
          ],
          "markdownDescription": "Brace style to use (js-beautify):\n\n- `collapse`: Opening brace on same line\n- `expand`: Opening brace on new line\n- `end-expand`: New line for functions/blocks only\n- `none`: Keep original position"
        },
        "hri.cfml.formatter.breakChainedMethods": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Break chained method calls across multiple lines (js-beautify)."
        },
        "hri.cfml.formatter.spaceBeforeConditional": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Add space before conditional statements (`if`, `while`, `for`) (js-beautify)."
        },
        "hri.cfml.formatter.endWithNewline": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "End files with a newline character (js-beautify)."
        },
        "hri.cfml.formatter.expressionWidth": {
          "type": "number",
          "default": 30,
          "minimum": 0,
          "markdownDescription": "Wrap lines when SQL specified string length is exceeded (sql-formatter)."
        },
        "hri.cfml.formatter.sqlLanguage": {
          "type": "string",
          "enum": [
            "sql",
            "mysql",
            "postgresql",
            "sqlite",
            "mariadb",
            "tidb",
            "tsql",
            "transactsql",
            "plsql",
            "bigquery",
            "redshift",
            "snowflake",
            "spark",
            "hive",
            "trino",
            "duckdb",
            "db2",
            "db2i",
            "n1ql",
            "singlestoredb"
          ],
          "enumDescriptions": [
            "Standard SQL",
            "MySQL",
            "PostgreSQL",
            "SQLite",
            "MariaDB",
            "TiDB",
            "SQL Server (T-SQL)",
            "Transact-SQL",
            "Oracle PL/SQL",
            "Google BigQuery",
            "Amazon Redshift",
            "Snowflake",
            "Apache Spark SQL",
            "Apache Hive",
            "Trino",
            "DuckDB",
            "IBM DB2",
            "IBM DB2 for i",
            "Couchbase N1QL",
            "SingleStore DB"
          ],
          "default": "mysql",
          "markdownDescription": "Select SQL dialect for formatting (sql-formatter)."
        }
      }
    }
  },
  "devDependencies": {
    "@types/js-beautify": "^1.14.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.2.1",
    "@types/vscode": "^1.76.0",
    "terser-webpack-plugin": "^5.3.14",
    "ts-loader": "^9.5.2",
    "typescript": "^5.9.2",
    "vsce": "^2.10.0",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "js-beautify": "^1.15.4",
    "sql-formatter": "^15.6.6"
  }
}